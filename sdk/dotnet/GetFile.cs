// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Archive
{
    public static class GetFile
    {
        /// <summary>
        /// Generates an archive from content, a file, or directory of files.
        /// </summary>
        public static Task<GetFileResult> InvokeAsync(GetFileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFileResult>("archive:index/getFile:getFile", args ?? new GetFileArgs(), options.WithDefaults());

        /// <summary>
        /// Generates an archive from content, a file, or directory of files.
        /// </summary>
        public static Output<GetFileResult> Invoke(GetFileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFileResult>("archive:index/getFile:getFile", args ?? new GetFileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Boolean flag indicating whether symbolically linked directories should be excluded during the creation of the archive. Defaults to `false`.
        /// </summary>
        [Input("excludeSymlinkDirectories")]
        public bool? ExcludeSymlinkDirectories { get; set; }

        [Input("excludes")]
        private List<string>? _excludes;

        /// <summary>
        /// Specify files to ignore when reading the `source_dir`.
        /// </summary>
        public List<string> Excludes
        {
            get => _excludes ?? (_excludes = new List<string>());
            set => _excludes = value;
        }

        /// <summary>
        /// String that specifies the octal file mode for all archived files. For example: `"0666"`. Setting this will ensure that cross platform usage of this module will not vary the modes of archived files (and ultimately checksums) resulting in more deterministic behavior.
        /// </summary>
        [Input("outputFileMode")]
        public string? OutputFileMode { get; set; }

        /// <summary>
        /// The output of the archive file.
        /// </summary>
        [Input("outputPath", required: true)]
        public string OutputPath { get; set; } = null!;

        /// <summary>
        /// Add only this content to the archive with `source_content_filename` as the filename. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceContent")]
        public string? SourceContent { get; set; }

        /// <summary>
        /// Set this as the filename when using `source_content`. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceContentFilename")]
        public string? SourceContentFilename { get; set; }

        /// <summary>
        /// Package entire contents of this directory into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceDir")]
        public string? SourceDir { get; set; }

        /// <summary>
        /// Package this file into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceFile")]
        public string? SourceFile { get; set; }

        [Input("sources")]
        private List<Inputs.GetFileSourceArgs>? _sources;

        /// <summary>
        /// Specifies attributes of a single source file to include into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        public List<Inputs.GetFileSourceArgs> Sources
        {
            get => _sources ?? (_sources = new List<Inputs.GetFileSourceArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// The type of archive to generate. NOTE: `zip` is supported.
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetFileArgs()
        {
        }
        public static new GetFileArgs Empty => new GetFileArgs();
    }

    public sealed class GetFileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Boolean flag indicating whether symbolically linked directories should be excluded during the creation of the archive. Defaults to `false`.
        /// </summary>
        [Input("excludeSymlinkDirectories")]
        public Input<bool>? ExcludeSymlinkDirectories { get; set; }

        [Input("excludes")]
        private InputList<string>? _excludes;

        /// <summary>
        /// Specify files to ignore when reading the `source_dir`.
        /// </summary>
        public InputList<string> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<string>());
            set => _excludes = value;
        }

        /// <summary>
        /// String that specifies the octal file mode for all archived files. For example: `"0666"`. Setting this will ensure that cross platform usage of this module will not vary the modes of archived files (and ultimately checksums) resulting in more deterministic behavior.
        /// </summary>
        [Input("outputFileMode")]
        public Input<string>? OutputFileMode { get; set; }

        /// <summary>
        /// The output of the archive file.
        /// </summary>
        [Input("outputPath", required: true)]
        public Input<string> OutputPath { get; set; } = null!;

        /// <summary>
        /// Add only this content to the archive with `source_content_filename` as the filename. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceContent")]
        public Input<string>? SourceContent { get; set; }

        /// <summary>
        /// Set this as the filename when using `source_content`. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceContentFilename")]
        public Input<string>? SourceContentFilename { get; set; }

        /// <summary>
        /// Package entire contents of this directory into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceDir")]
        public Input<string>? SourceDir { get; set; }

        /// <summary>
        /// Package this file into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        [Input("sourceFile")]
        public Input<string>? SourceFile { get; set; }

        [Input("sources")]
        private InputList<Inputs.GetFileSourceInputArgs>? _sources;

        /// <summary>
        /// Specifies attributes of a single source file to include into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        public InputList<Inputs.GetFileSourceInputArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.GetFileSourceInputArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// The type of archive to generate. NOTE: `zip` is supported.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetFileInvokeArgs()
        {
        }
        public static new GetFileInvokeArgs Empty => new GetFileInvokeArgs();
    }


    [OutputType]
    public sealed class GetFileResult
    {
        /// <summary>
        /// Boolean flag indicating whether symbolically linked directories should be excluded during the creation of the archive. Defaults to `false`.
        /// </summary>
        public readonly bool? ExcludeSymlinkDirectories;
        /// <summary>
        /// Specify files to ignore when reading the `source_dir`.
        /// </summary>
        public readonly ImmutableArray<string> Excludes;
        /// <summary>
        /// The sha1 checksum hash of the output.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Base64 Encoded SHA256 checksum of output file
        /// </summary>
        public readonly string OutputBase64sha256;
        /// <summary>
        /// Base64 Encoded SHA512 checksum of output file
        /// </summary>
        public readonly string OutputBase64sha512;
        /// <summary>
        /// String that specifies the octal file mode for all archived files. For example: `"0666"`. Setting this will ensure that cross platform usage of this module will not vary the modes of archived files (and ultimately checksums) resulting in more deterministic behavior.
        /// </summary>
        public readonly string? OutputFileMode;
        /// <summary>
        /// MD5 of output file
        /// </summary>
        public readonly string OutputMd5;
        /// <summary>
        /// The output of the archive file.
        /// </summary>
        public readonly string OutputPath;
        /// <summary>
        /// SHA1 checksum of output file
        /// </summary>
        public readonly string OutputSha;
        /// <summary>
        /// SHA256 checksum of output file
        /// </summary>
        public readonly string OutputSha256;
        /// <summary>
        /// SHA512 checksum of output file
        /// </summary>
        public readonly string OutputSha512;
        /// <summary>
        /// The byte size of the output archive file.
        /// </summary>
        public readonly int OutputSize;
        /// <summary>
        /// Add only this content to the archive with `source_content_filename` as the filename. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        public readonly string? SourceContent;
        /// <summary>
        /// Set this as the filename when using `source_content`. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        public readonly string? SourceContentFilename;
        /// <summary>
        /// Package entire contents of this directory into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        public readonly string? SourceDir;
        /// <summary>
        /// Package this file into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        public readonly string? SourceFile;
        /// <summary>
        /// Specifies attributes of a single source file to include into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFileSourceResult> Sources;
        /// <summary>
        /// The type of archive to generate. NOTE: `zip` is supported.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetFileResult(
            bool? excludeSymlinkDirectories,

            ImmutableArray<string> excludes,

            string id,

            string outputBase64sha256,

            string outputBase64sha512,

            string? outputFileMode,

            string outputMd5,

            string outputPath,

            string outputSha,

            string outputSha256,

            string outputSha512,

            int outputSize,

            string? sourceContent,

            string? sourceContentFilename,

            string? sourceDir,

            string? sourceFile,

            ImmutableArray<Outputs.GetFileSourceResult> sources,

            string type)
        {
            ExcludeSymlinkDirectories = excludeSymlinkDirectories;
            Excludes = excludes;
            Id = id;
            OutputBase64sha256 = outputBase64sha256;
            OutputBase64sha512 = outputBase64sha512;
            OutputFileMode = outputFileMode;
            OutputMd5 = outputMd5;
            OutputPath = outputPath;
            OutputSha = outputSha;
            OutputSha256 = outputSha256;
            OutputSha512 = outputSha512;
            OutputSize = outputSize;
            SourceContent = sourceContent;
            SourceContentFilename = sourceContentFilename;
            SourceDir = sourceDir;
            SourceFile = sourceFile;
            Sources = sources;
            Type = type;
        }
    }
}
