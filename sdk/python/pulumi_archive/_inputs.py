# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'FileSourceArgs',
    'FileSourceArgsDict',
    'GetFileSourceArgs',
    'GetFileSourceArgsDict',
]

MYPY = False

if not MYPY:
    class FileSourceArgsDict(TypedDict):
        content: pulumi.Input[_builtins.str]
        """
        Add this content to the archive with `filename` as the filename.
        """
        filename: pulumi.Input[_builtins.str]
        """
        Set this as the filename when declaring a `source`.
        """
elif False:
    FileSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileSourceArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 filename: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] content: Add this content to the archive with `filename` as the filename.
        :param pulumi.Input[_builtins.str] filename: Set this as the filename when declaring a `source`.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "filename", filename)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Add this content to the archive with `filename` as the filename.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def filename(self) -> pulumi.Input[_builtins.str]:
        """
        Set this as the filename when declaring a `source`.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "filename", value)


if not MYPY:
    class GetFileSourceArgsDict(TypedDict):
        content: _builtins.str
        """
        Add this content to the archive with `filename` as the filename.
        """
        filename: _builtins.str
        """
        Set this as the filename when declaring a `source`.
        """
elif False:
    GetFileSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetFileSourceArgs:
    def __init__(__self__, *,
                 content: _builtins.str,
                 filename: _builtins.str):
        """
        :param _builtins.str content: Add this content to the archive with `filename` as the filename.
        :param _builtins.str filename: Set this as the filename when declaring a `source`.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "filename", filename)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        Add this content to the archive with `filename` as the filename.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: _builtins.str):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def filename(self) -> _builtins.str:
        """
        Set this as the filename when declaring a `source`.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: _builtins.str):
        pulumi.set(self, "filename", value)


