// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.archive.outputs;

import com.pulumi.archive.outputs.GetFileSource;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFileResult {
    /**
     * @return Boolean flag indicating whether symbolically linked directories should be excluded during the creation of the archive. Defaults to `false`.
     * 
     */
    private @Nullable Boolean excludeSymlinkDirectories;
    /**
     * @return Specify files/directories to ignore when reading the `source_dir`. Supports glob file matching patterns including doublestar/globstar (`**`) patterns.
     * 
     */
    private @Nullable List<String> excludes;
    /**
     * @return The sha1 checksum hash of the output.
     * 
     */
    private String id;
    /**
     * @return Base64 Encoded SHA256 checksum of output file
     * 
     */
    private String outputBase64sha256;
    /**
     * @return Base64 Encoded SHA512 checksum of output file
     * 
     */
    private String outputBase64sha512;
    /**
     * @return String that specifies the octal file mode for all archived files. For example: `&#34;0666&#34;`. Setting this will ensure that cross platform usage of this module will not vary the modes of archived files (and ultimately checksums) resulting in more deterministic behavior.
     * 
     */
    private @Nullable String outputFileMode;
    /**
     * @return MD5 of output file
     * 
     */
    private String outputMd5;
    /**
     * @return The output of the archive file.
     * 
     */
    private String outputPath;
    /**
     * @return SHA1 checksum of output file
     * 
     */
    private String outputSha;
    /**
     * @return SHA256 checksum of output file
     * 
     */
    private String outputSha256;
    /**
     * @return SHA512 checksum of output file
     * 
     */
    private String outputSha512;
    /**
     * @return The byte size of the output archive file.
     * 
     */
    private Integer outputSize;
    /**
     * @return Add only this content to the archive with `source_content_filename` as the filename. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    private @Nullable String sourceContent;
    /**
     * @return Set this as the filename when using `source_content`. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    private @Nullable String sourceContentFilename;
    /**
     * @return Package entire contents of this directory into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    private @Nullable String sourceDir;
    /**
     * @return Package this file into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    private @Nullable String sourceFile;
    /**
     * @return Specifies attributes of a single source file to include into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    private @Nullable List<GetFileSource> sources;
    /**
     * @return The type of archive to generate. NOTE: `zip` and `tar.gz` is supported.
     * 
     */
    private String type;

    private GetFileResult() {}
    /**
     * @return Boolean flag indicating whether symbolically linked directories should be excluded during the creation of the archive. Defaults to `false`.
     * 
     */
    public Optional<Boolean> excludeSymlinkDirectories() {
        return Optional.ofNullable(this.excludeSymlinkDirectories);
    }
    /**
     * @return Specify files/directories to ignore when reading the `source_dir`. Supports glob file matching patterns including doublestar/globstar (`**`) patterns.
     * 
     */
    public List<String> excludes() {
        return this.excludes == null ? List.of() : this.excludes;
    }
    /**
     * @return The sha1 checksum hash of the output.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Base64 Encoded SHA256 checksum of output file
     * 
     */
    public String outputBase64sha256() {
        return this.outputBase64sha256;
    }
    /**
     * @return Base64 Encoded SHA512 checksum of output file
     * 
     */
    public String outputBase64sha512() {
        return this.outputBase64sha512;
    }
    /**
     * @return String that specifies the octal file mode for all archived files. For example: `&#34;0666&#34;`. Setting this will ensure that cross platform usage of this module will not vary the modes of archived files (and ultimately checksums) resulting in more deterministic behavior.
     * 
     */
    public Optional<String> outputFileMode() {
        return Optional.ofNullable(this.outputFileMode);
    }
    /**
     * @return MD5 of output file
     * 
     */
    public String outputMd5() {
        return this.outputMd5;
    }
    /**
     * @return The output of the archive file.
     * 
     */
    public String outputPath() {
        return this.outputPath;
    }
    /**
     * @return SHA1 checksum of output file
     * 
     */
    public String outputSha() {
        return this.outputSha;
    }
    /**
     * @return SHA256 checksum of output file
     * 
     */
    public String outputSha256() {
        return this.outputSha256;
    }
    /**
     * @return SHA512 checksum of output file
     * 
     */
    public String outputSha512() {
        return this.outputSha512;
    }
    /**
     * @return The byte size of the output archive file.
     * 
     */
    public Integer outputSize() {
        return this.outputSize;
    }
    /**
     * @return Add only this content to the archive with `source_content_filename` as the filename. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    public Optional<String> sourceContent() {
        return Optional.ofNullable(this.sourceContent);
    }
    /**
     * @return Set this as the filename when using `source_content`. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    public Optional<String> sourceContentFilename() {
        return Optional.ofNullable(this.sourceContentFilename);
    }
    /**
     * @return Package entire contents of this directory into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    public Optional<String> sourceDir() {
        return Optional.ofNullable(this.sourceDir);
    }
    /**
     * @return Package this file into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    public Optional<String> sourceFile() {
        return Optional.ofNullable(this.sourceFile);
    }
    /**
     * @return Specifies attributes of a single source file to include into the archive. One and only one of `source`, `source_content_filename` (with `source_content`), `source_file`, or `source_dir` must be specified.
     * 
     */
    public List<GetFileSource> sources() {
        return this.sources == null ? List.of() : this.sources;
    }
    /**
     * @return The type of archive to generate. NOTE: `zip` and `tar.gz` is supported.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean excludeSymlinkDirectories;
        private @Nullable List<String> excludes;
        private String id;
        private String outputBase64sha256;
        private String outputBase64sha512;
        private @Nullable String outputFileMode;
        private String outputMd5;
        private String outputPath;
        private String outputSha;
        private String outputSha256;
        private String outputSha512;
        private Integer outputSize;
        private @Nullable String sourceContent;
        private @Nullable String sourceContentFilename;
        private @Nullable String sourceDir;
        private @Nullable String sourceFile;
        private @Nullable List<GetFileSource> sources;
        private String type;
        public Builder() {}
        public Builder(GetFileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludeSymlinkDirectories = defaults.excludeSymlinkDirectories;
    	      this.excludes = defaults.excludes;
    	      this.id = defaults.id;
    	      this.outputBase64sha256 = defaults.outputBase64sha256;
    	      this.outputBase64sha512 = defaults.outputBase64sha512;
    	      this.outputFileMode = defaults.outputFileMode;
    	      this.outputMd5 = defaults.outputMd5;
    	      this.outputPath = defaults.outputPath;
    	      this.outputSha = defaults.outputSha;
    	      this.outputSha256 = defaults.outputSha256;
    	      this.outputSha512 = defaults.outputSha512;
    	      this.outputSize = defaults.outputSize;
    	      this.sourceContent = defaults.sourceContent;
    	      this.sourceContentFilename = defaults.sourceContentFilename;
    	      this.sourceDir = defaults.sourceDir;
    	      this.sourceFile = defaults.sourceFile;
    	      this.sources = defaults.sources;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder excludeSymlinkDirectories(@Nullable Boolean excludeSymlinkDirectories) {

            this.excludeSymlinkDirectories = excludeSymlinkDirectories;
            return this;
        }
        @CustomType.Setter
        public Builder excludes(@Nullable List<String> excludes) {

            this.excludes = excludes;
            return this;
        }
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder outputBase64sha256(String outputBase64sha256) {
            if (outputBase64sha256 == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputBase64sha256");
            }
            this.outputBase64sha256 = outputBase64sha256;
            return this;
        }
        @CustomType.Setter
        public Builder outputBase64sha512(String outputBase64sha512) {
            if (outputBase64sha512 == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputBase64sha512");
            }
            this.outputBase64sha512 = outputBase64sha512;
            return this;
        }
        @CustomType.Setter
        public Builder outputFileMode(@Nullable String outputFileMode) {

            this.outputFileMode = outputFileMode;
            return this;
        }
        @CustomType.Setter
        public Builder outputMd5(String outputMd5) {
            if (outputMd5 == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputMd5");
            }
            this.outputMd5 = outputMd5;
            return this;
        }
        @CustomType.Setter
        public Builder outputPath(String outputPath) {
            if (outputPath == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputPath");
            }
            this.outputPath = outputPath;
            return this;
        }
        @CustomType.Setter
        public Builder outputSha(String outputSha) {
            if (outputSha == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputSha");
            }
            this.outputSha = outputSha;
            return this;
        }
        @CustomType.Setter
        public Builder outputSha256(String outputSha256) {
            if (outputSha256 == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputSha256");
            }
            this.outputSha256 = outputSha256;
            return this;
        }
        @CustomType.Setter
        public Builder outputSha512(String outputSha512) {
            if (outputSha512 == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputSha512");
            }
            this.outputSha512 = outputSha512;
            return this;
        }
        @CustomType.Setter
        public Builder outputSize(Integer outputSize) {
            if (outputSize == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "outputSize");
            }
            this.outputSize = outputSize;
            return this;
        }
        @CustomType.Setter
        public Builder sourceContent(@Nullable String sourceContent) {

            this.sourceContent = sourceContent;
            return this;
        }
        @CustomType.Setter
        public Builder sourceContentFilename(@Nullable String sourceContentFilename) {

            this.sourceContentFilename = sourceContentFilename;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDir(@Nullable String sourceDir) {

            this.sourceDir = sourceDir;
            return this;
        }
        @CustomType.Setter
        public Builder sourceFile(@Nullable String sourceFile) {

            this.sourceFile = sourceFile;
            return this;
        }
        @CustomType.Setter
        public Builder sources(@Nullable List<GetFileSource> sources) {

            this.sources = sources;
            return this;
        }
        public Builder sources(GetFileSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetFileResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetFileResult build() {
            final var _resultValue = new GetFileResult();
            _resultValue.excludeSymlinkDirectories = excludeSymlinkDirectories;
            _resultValue.excludes = excludes;
            _resultValue.id = id;
            _resultValue.outputBase64sha256 = outputBase64sha256;
            _resultValue.outputBase64sha512 = outputBase64sha512;
            _resultValue.outputFileMode = outputFileMode;
            _resultValue.outputMd5 = outputMd5;
            _resultValue.outputPath = outputPath;
            _resultValue.outputSha = outputSha;
            _resultValue.outputSha256 = outputSha256;
            _resultValue.outputSha512 = outputSha512;
            _resultValue.outputSize = outputSize;
            _resultValue.sourceContent = sourceContent;
            _resultValue.sourceContentFilename = sourceContentFilename;
            _resultValue.sourceDir = sourceDir;
            _resultValue.sourceFile = sourceFile;
            _resultValue.sources = sources;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
