// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.archive;

import com.pulumi.archive.Utilities;
import com.pulumi.archive.inputs.GetFileArgs;
import com.pulumi.archive.inputs.GetFilePlainArgs;
import com.pulumi.archive.outputs.GetFileResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class ArchiveFunctions {
    /**
     * Generates an archive from content, a file, or directory of files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var init = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(String.format(&#34;%s/files/init.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/init.tpl&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dotfiles = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .type(&#34;zip&#34;)
     *             .outputPath(String.format(&#34;%s/files/dotfiles.zip&#34;, path.module()))
     *             .excludes(String.format(&#34;%s/unwanted.zip&#34;, path.module()))
     *             .sources(            
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().vimrc().rendered())
     *                     .filename(&#34;.vimrc&#34;)
     *                     .build(),
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().ssh_config().rendered())
     *                     .filename(&#34;.ssh/config&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lambdaMyFunction = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputFileMode(&#34;0666&#34;)
     *             .outputPath(String.format(&#34;%s/files/lambda-my-function.js.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/../lambda/my-function/index.js&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args) {
        return getFile(args, InvokeOptions.Empty);
    }
    /**
     * Generates an archive from content, a file, or directory of files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var init = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(String.format(&#34;%s/files/init.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/init.tpl&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dotfiles = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .type(&#34;zip&#34;)
     *             .outputPath(String.format(&#34;%s/files/dotfiles.zip&#34;, path.module()))
     *             .excludes(String.format(&#34;%s/unwanted.zip&#34;, path.module()))
     *             .sources(            
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().vimrc().rendered())
     *                     .filename(&#34;.vimrc&#34;)
     *                     .build(),
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().ssh_config().rendered())
     *                     .filename(&#34;.ssh/config&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lambdaMyFunction = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputFileMode(&#34;0666&#34;)
     *             .outputPath(String.format(&#34;%s/files/lambda-my-function.js.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/../lambda/my-function/index.js&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args) {
        return getFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Generates an archive from content, a file, or directory of files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var init = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(String.format(&#34;%s/files/init.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/init.tpl&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dotfiles = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .type(&#34;zip&#34;)
     *             .outputPath(String.format(&#34;%s/files/dotfiles.zip&#34;, path.module()))
     *             .excludes(String.format(&#34;%s/unwanted.zip&#34;, path.module()))
     *             .sources(            
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().vimrc().rendered())
     *                     .filename(&#34;.vimrc&#34;)
     *                     .build(),
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().ssh_config().rendered())
     *                     .filename(&#34;.ssh/config&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lambdaMyFunction = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputFileMode(&#34;0666&#34;)
     *             .outputPath(String.format(&#34;%s/files/lambda-my-function.js.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/../lambda/my-function/index.js&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFileResult> getFile(GetFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("archive:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Generates an archive from content, a file, or directory of files.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var init = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputPath(String.format(&#34;%s/files/init.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/init.tpl&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dotfiles = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .type(&#34;zip&#34;)
     *             .outputPath(String.format(&#34;%s/files/dotfiles.zip&#34;, path.module()))
     *             .excludes(String.format(&#34;%s/unwanted.zip&#34;, path.module()))
     *             .sources(            
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().vimrc().rendered())
     *                     .filename(&#34;.vimrc&#34;)
     *                     .build(),
     *                 GetFileSourceArgs.builder()
     *                     .content(data.template_file().ssh_config().rendered())
     *                     .filename(&#34;.ssh/config&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.archive.ArchiveFunctions;
     * import com.pulumi.archive.inputs.GetFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lambdaMyFunction = ArchiveFunctions.getFile(GetFileArgs.builder()
     *             .outputFileMode(&#34;0666&#34;)
     *             .outputPath(String.format(&#34;%s/files/lambda-my-function.js.zip&#34;, path.module()))
     *             .sourceFile(String.format(&#34;%s/../lambda/my-function/index.js&#34;, path.module()))
     *             .type(&#34;zip&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFileResult> getFilePlain(GetFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("archive:index/getFile:getFile", TypeShape.of(GetFileResult.class), args, Utilities.withVersion(options));
    }
}
