// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.archive;

import com.pulumi.archive.FileArgs;
import com.pulumi.archive.Utilities;
import com.pulumi.archive.inputs.FileState;
import com.pulumi.archive.outputs.FileSource;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Generates an archive from content, a file, or directory of files.
 * 
 */
@ResourceType(type="archive:index/file:File")
public class File extends com.pulumi.resources.CustomResource {
    /**
     * Boolean flag indicating whether symbolically linked directories should be excluded during the creation of the archive. Defaults to `false`.
     * 
     */
    @Export(name="excludeSymlinkDirectories", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> excludeSymlinkDirectories;

    /**
     * @return Boolean flag indicating whether symbolically linked directories should be excluded during the creation of the archive. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> excludeSymlinkDirectories() {
        return Codegen.optional(this.excludeSymlinkDirectories);
    }
    /**
     * Specify files/directories to ignore when reading the `sourceDir`. Supports glob file matching patterns including doublestar/globstar (`**`) patterns.
     * 
     */
    @Export(name="excludes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> excludes;

    /**
     * @return Specify files/directories to ignore when reading the `sourceDir`. Supports glob file matching patterns including doublestar/globstar (`**`) patterns.
     * 
     */
    public Output<Optional<List<String>>> excludes() {
        return Codegen.optional(this.excludes);
    }
    /**
     * Base64 Encoded SHA256 checksum of output file
     * 
     */
    @Export(name="outputBase64sha256", refs={String.class}, tree="[0]")
    private Output<String> outputBase64sha256;

    /**
     * @return Base64 Encoded SHA256 checksum of output file
     * 
     */
    public Output<String> outputBase64sha256() {
        return this.outputBase64sha256;
    }
    /**
     * Base64 Encoded SHA512 checksum of output file
     * 
     */
    @Export(name="outputBase64sha512", refs={String.class}, tree="[0]")
    private Output<String> outputBase64sha512;

    /**
     * @return Base64 Encoded SHA512 checksum of output file
     * 
     */
    public Output<String> outputBase64sha512() {
        return this.outputBase64sha512;
    }
    /**
     * String that specifies the octal file mode for all archived files. For example: `&#34;0666&#34;`. Setting this will ensure that cross platform usage of this module will not vary the modes of archived files (and ultimately checksums) resulting in more deterministic behavior.
     * 
     */
    @Export(name="outputFileMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> outputFileMode;

    /**
     * @return String that specifies the octal file mode for all archived files. For example: `&#34;0666&#34;`. Setting this will ensure that cross platform usage of this module will not vary the modes of archived files (and ultimately checksums) resulting in more deterministic behavior.
     * 
     */
    public Output<Optional<String>> outputFileMode() {
        return Codegen.optional(this.outputFileMode);
    }
    /**
     * MD5 of output file
     * 
     */
    @Export(name="outputMd5", refs={String.class}, tree="[0]")
    private Output<String> outputMd5;

    /**
     * @return MD5 of output file
     * 
     */
    public Output<String> outputMd5() {
        return this.outputMd5;
    }
    /**
     * The output of the archive file.
     * 
     */
    @Export(name="outputPath", refs={String.class}, tree="[0]")
    private Output<String> outputPath;

    /**
     * @return The output of the archive file.
     * 
     */
    public Output<String> outputPath() {
        return this.outputPath;
    }
    /**
     * SHA1 checksum of output file
     * 
     */
    @Export(name="outputSha", refs={String.class}, tree="[0]")
    private Output<String> outputSha;

    /**
     * @return SHA1 checksum of output file
     * 
     */
    public Output<String> outputSha() {
        return this.outputSha;
    }
    /**
     * SHA256 checksum of output file
     * 
     */
    @Export(name="outputSha256", refs={String.class}, tree="[0]")
    private Output<String> outputSha256;

    /**
     * @return SHA256 checksum of output file
     * 
     */
    public Output<String> outputSha256() {
        return this.outputSha256;
    }
    /**
     * SHA512 checksum of output file
     * 
     */
    @Export(name="outputSha512", refs={String.class}, tree="[0]")
    private Output<String> outputSha512;

    /**
     * @return SHA512 checksum of output file
     * 
     */
    public Output<String> outputSha512() {
        return this.outputSha512;
    }
    /**
     * The byte size of the output archive file.
     * 
     */
    @Export(name="outputSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> outputSize;

    /**
     * @return The byte size of the output archive file.
     * 
     */
    public Output<Integer> outputSize() {
        return this.outputSize;
    }
    /**
     * Add only this content to the archive with `sourceContentFilename` as the filename. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    @Export(name="sourceContent", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceContent;

    /**
     * @return Add only this content to the archive with `sourceContentFilename` as the filename. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    public Output<Optional<String>> sourceContent() {
        return Codegen.optional(this.sourceContent);
    }
    /**
     * Set this as the filename when using `sourceContent`. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    @Export(name="sourceContentFilename", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceContentFilename;

    /**
     * @return Set this as the filename when using `sourceContent`. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    public Output<Optional<String>> sourceContentFilename() {
        return Codegen.optional(this.sourceContentFilename);
    }
    /**
     * Package entire contents of this directory into the archive. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    @Export(name="sourceDir", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceDir;

    /**
     * @return Package entire contents of this directory into the archive. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    public Output<Optional<String>> sourceDir() {
        return Codegen.optional(this.sourceDir);
    }
    /**
     * Package this file into the archive. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    @Export(name="sourceFile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceFile;

    /**
     * @return Package this file into the archive. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    public Output<Optional<String>> sourceFile() {
        return Codegen.optional(this.sourceFile);
    }
    /**
     * Specifies attributes of a single source file to include into the archive. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    @Export(name="sources", refs={List.class,FileSource.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FileSource>> sources;

    /**
     * @return Specifies attributes of a single source file to include into the archive. One and only one of `source`, `sourceContentFilename` (with `sourceContent`), `sourceFile`, or `sourceDir` must be specified.
     * 
     */
    public Output<Optional<List<FileSource>>> sources() {
        return Codegen.optional(this.sources);
    }
    /**
     * The type of archive to generate. NOTE: `zip` and `tar.gz` is supported.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of archive to generate. NOTE: `zip` and `tar.gz` is supported.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public File(java.lang.String name) {
        this(name, FileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public File(java.lang.String name, FileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public File(java.lang.String name, FileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("archive:index/file:File", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private File(java.lang.String name, Output<java.lang.String> id, @Nullable FileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("archive:index/file:File", name, state, makeResourceOptions(options, id), false);
    }

    private static FileArgs makeArgs(FileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FileArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static File get(java.lang.String name, Output<java.lang.String> id, @Nullable FileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new File(name, id, state, options);
    }
}
